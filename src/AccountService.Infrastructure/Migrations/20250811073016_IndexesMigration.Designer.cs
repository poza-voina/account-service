// <auto-generated />
using System;
using AccountService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250811073016_IndexesMigration")]
    partial class IndexesMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountService.Infrastructure.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closingDate");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric")
                        .HasColumnName("interestRate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("OpeningDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("openingDate")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ownerId");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "hash");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("AccountService.Infrastructure.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("bankAccountId");

                    b.Property<Guid?>("CounterpartyBankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("counterpartyBankAccountId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsApply")
                        .HasColumnType("boolean")
                        .HasColumnName("isApply");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyBankAccountId");

                    b.HasIndex("CreatedAt");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CreatedAt"), "gist");

                    b.HasIndex("BankAccountId", "CreatedAt");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("AccountService.Infrastructure.Models.Transaction", b =>
                {
                    b.HasOne("AccountService.Infrastructure.Models.Account", "BankAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountService.Infrastructure.Models.Account", "CounterpartyBankAccount")
                        .WithMany("CounterPartyTransactions")
                        .HasForeignKey("CounterpartyBankAccountId");

                    b.Navigation("BankAccount");

                    b.Navigation("CounterpartyBankAccount");
                });

            modelBuilder.Entity("AccountService.Infrastructure.Models.Account", b =>
                {
                    b.Navigation("CounterPartyTransactions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}

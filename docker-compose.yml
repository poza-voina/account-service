services:
  account-service.api:
    image: ${DOCKER_REGISTRY-}accountserviceapi
    build:
      context: .
      dockerfile: src/AccountService.Api/Dockerfile
    depends_on:
      keycloak:
        condition: service_healthy
      keycloak-init:
        condition: service_completed_successfully
    ports:
        - "${ACCOUNT_SERVICE_API_PORT}:80"
    environment:
      - Authentication__Realm=${REALM}
      - Authentication__BaseUrl=http://localhost:${KEYCLOAK_PORT}
      - Authentication__KeycloakDockerUrl=http://keycloak:${KEYCLOAK_PORT}
      - Authentication__RequireHttpsMetadata=false
      - Authentication__Audience=account
      - Authentication__ClientId=${CLIENT_ID}
      - Authentication__ClientSecret=${CLIENT_SECRET}
      - ConnectionStrings__PostgreSqlConnection=User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Server=postgres;Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Pooling=true;

  postgres:
    image: postgres:17
    container_name: postgres-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./database/procedures:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  migration-runner:
    build:
      context: .
      dockerfile:  src/MigrationRunner/Dockerfile
    container_name: migration-runner
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__PostgreSqlConnection=User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Server=postgres;Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Pooling=true;
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    ports:
      - "${KEYCLOAK_PORT}:8080"
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_LOGIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    command: ["start-dev"]
    healthcheck:
      test: ["CMD", "bash", "-c", "if </dev/tcp/localhost/$KEYCLOAK_PORT; then exit 0; else exit 1; fi"]
      interval: 20s
      timeout: 5s
      retries: 5

  keycloak-init:
    image: quay.io/keycloak/keycloak:26.3.2
    depends_on:
      keycloak:
        condition: service_healthy
    entrypoint: [ "bash", "-c", "/opt/keycloak/bin/kcadm.sh config credentials --server http://keycloak:${KEYCLOAK_PORT} --realm master --user ${KEYCLOAK_ADMIN_LOGIN} --password ${KEYCLOAK_ADMIN_PASSWORD} && bash /opt/keycloak/generate-realm.sh" ]
    volumes:
      - ./generate-realm.sh:/opt/keycloak/generate-realm.sh:ro
      - ./.env:/opt/keycloak/.env:ro
    restart: no

volumes:
  postgres_data: